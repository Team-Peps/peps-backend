name: Build, Push & Deploy Docker Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
  push:
    branches:
      - dev

env:
  IMAGE_NAME: serkox/peps-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.generate-tag.outputs.tag }}

    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🧪 Build application avec Maven
        run: mvn clean package -DskipTests

      - name: 🔐 Connexion à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Générer un tag basé sur le commit SHA
        id: generate-tag
        run: |
          TAG=$(git rev-parse --short HEAD)
          echo "TAG=$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: 🐳 Build de l’image Docker
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ steps.generate-tag.outputs.tag }} .

      - name: 🚀 Push de l’image Docker
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ steps.generate-tag.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ${{ github.event_name == 'push' && 'dev' || github.event.inputs.environment }}

    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v4

      - name: 🧪 Déterminer l’environnement
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: 📦 Définir les variables selon l’environnement
        id: set-vars
        run: |
          if [ "$ENVIRONMENT" = "prod" ]; then
            echo "release_name=peps-api-prod" >> $GITHUB_OUTPUT
            echo "namespace=peps-prod" >> $GITHUB_OUTPUT
            echo "values_file=values-prod.yaml" >> $GITHUB_OUTPUT
          else
            echo "release_name=peps-api-dev" >> $GITHUB_OUTPUT
            echo "namespace=peps-dev" >> $GITHUB_OUTPUT
            echo "values_file=values-dev.yaml" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: 📦 Setup Helm
        uses: azure/setup-helm@v3

      - name: 📂 Configurer Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      - name: 🚀 Déploiement avec Helm
        run: |
          helm upgrade --install ${{ steps.set-vars.outputs.release_name }} ./deploy \
            --namespace ${{ steps.set-vars.outputs.namespace }} \
            --set image.repository=${{ env.IMAGE_NAME }} \
            --set image.tag=${{ needs.build-and-push.outputs.image_tag }} \
            -f deploy/${{ steps.set-vars.outputs.values_file }}

  notify-discord:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: 📣 Envoyer une notification Discord
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{
            "username": "GitHub Deploy Bot",
            "embeds": [{
              "title": "✅ Déploiement terminé",
              "description": "**Projet :** Peps API\n**Environnement :** '"$ENVIRONMENT"'\n**Image tag :** '${{ needs.build-and-push.outputs.image_tag }}'\n**Auteur :** ${{ github.actor }}",
              "color": 5814783
            }]
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}
